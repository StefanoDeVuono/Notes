Views / Routing
 - Models not necessary for request response lifecycle
 - Request comes into server and server generates empty response object, header and body filled out by app, then sent back

 - each new request in new app
 - instance variables used to share data with view (this is a bit of a hack)

 - how can a view access helper methods in controller? eg: logged_in?
   share it via: helper_method :logged_in? put this in the applicationcontroller parent class

 - embedded ruby <%= vs <%

Authentication / Authorization
 - authentication = "who is making the request?"
 - authorization = "are they allowed to make this request?"
 - there needs to be a piece of data in the request saying who the user is to match with db

 def current_user
  current_user ||= user.find_by_token(params[:token]) #params means it came from query string or post data
 end

 post /"auth" => SessionCreate

 Cookies
 - instead of using a token on every link and form we maintain state with cookies
 - set token inside cookie

 Redirect
 - tells browser to redirect. browser should obey.

Auth / Auth
 Digest::SHA2
 - DO NOT STORE PASSWORD, STORE DIGEST
 def password=(password)
  self.password_digest = Digest::SHA2.base64digest(password)
 end

 def verify_password=(password)
  self.password_digest == Digest::SHA2.base64digest(password)
 end

 #Cookies??

 resource session
 session#new is login

SessionController
 def create
   user = User.find_by_username(params[:user][:username])
   user.verify_password(params[:user][:password])
 end
 def reset_session_token
   self.session_token = SecureRandom::base64(16)
   self.save!
   self.session_token
   #session_token is a column in the database, password in the model, not in the db, db just has pass_digest
 end

 redirect_to does not return you from the method
 always plural controller, even if resource name is singular

 Association style
 do not specify all options on one line
 NO BELONGS TO THROUGH, has_one through or has_many through
 SCHEMA, SCHEMA, SCHEMA!

 RAILS GUIDES

 has... through goes through two jumps, but those jumps can be has... throughs themselves